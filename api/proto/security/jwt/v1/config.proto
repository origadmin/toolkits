syntax = "proto3";

package security.jwt.v1;

import "gnostic/openapi/v3/annotations.proto";
import "validate/validate.proto";

option cc_enable_arenas = true;
option csharp_namespace = "OrigAdmin.Runtime.Security.JWT.V1";
option go_package = "github.com/origadmin/runtime/api/gen/go/security/jwt/v1;jwtv1";
option java_multiple_files = true;
option java_outer_classname = "JWTProto";
option java_package = "com.github.origadmin.api.runtime.security.jwt.v1";
option objc_class_prefix = "ORST";
option php_namespace = "OrigAdmin\\Runtime\\Security\\JWT\\V1";

// Config contains configuration parameters for creating and validating a JWT.
message Config {
  string signing_method = 1 [
    json_name = "signing_method",
    (validate.rules).string = {
      min_len: 1
      max_len: 1024
      pattern: "^[A-Z0-9]+$"
    },
    (gnostic.openapi.v3.property) = {description: "The signing method used for the token (e.g., HS256, RS256)."}
  ];
  string key = 2 [
    json_name = "key",
    (validate.rules).string = {
      min_len: 1
      max_len: 1024
    },
    (gnostic.openapi.v3.property) = {description: "The key used for signing the token."}
  ];
  string key2 = 3 [
    json_name = "key2",
    (gnostic.openapi.v3.property) = {description: "The secondary key used for signing the token."}
  ];
  int64 access_token_lifetime = 5 [
    json_name = "access_token_lifetime",
    (validate.rules).int64 = {
      gte: 1
      lte: 31536000
    },
    (gnostic.openapi.v3.property) = {description: "The lifetime of the token."}
  ];
  int64 refresh_token_lifetime = 6 [
    json_name = "refresh_token_lifetime",
    (validate.rules).int64 = {
      gte: 1
      lte: 31536000
    },
    (gnostic.openapi.v3.property) = {description: "The lifetime of the refresh token."}
  ];
  string issuer = 7 [
    json_name = "issuer",
    (gnostic.openapi.v3.property) = {description: "The issuer of the token."}
  ];
  repeated string audience = 8 [
    json_name = "audience",
    (validate.rules).repeated = {
      min_items: 1
      max_items: 1024,
      unique: true,
    },
    (gnostic.openapi.v3.property) = {description: "The audience for which the token is intended."}
  ]; // Audience
  string token_type = 9 [
    json_name = "token_type",
    (validate.rules).string = {
      min_len: 1
      max_len: 1024
    },
    (gnostic.openapi.v3.property) = {description: "The type of the token (e.g., Bearer)."}
  ];
}
