// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: security/v1/auth.proto

package securityv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BasicAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BasicAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasicAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BasicAuthMultiError, or nil
// if none found.
func (m *BasicAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *BasicAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := BasicAuthValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := BasicAuthValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BasicAuthMultiError(errors)
	}

	return nil
}

// BasicAuthMultiError is an error wrapping multiple validation errors returned
// by BasicAuth.ValidateAll() if the designated constraints aren't met.
type BasicAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicAuthMultiError) AllErrors() []error { return m }

// BasicAuthValidationError is the validation error returned by
// BasicAuth.Validate if the designated constraints aren't met.
type BasicAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthValidationError) ErrorName() string { return "BasicAuthValidationError" }

// Error satisfies the builtin error interface
func (e BasicAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthValidationError{}

// Validate checks the field values on BearerAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BearerAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BearerAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BearerAuthMultiError, or
// nil if none found.
func (m *BearerAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *BearerAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := BearerAuthValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BearerAuthMultiError(errors)
	}

	return nil
}

// BearerAuthMultiError is an error wrapping multiple validation errors
// returned by BearerAuth.ValidateAll() if the designated constraints aren't met.
type BearerAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BearerAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BearerAuthMultiError) AllErrors() []error { return m }

// BearerAuthValidationError is the validation error returned by
// BearerAuth.Validate if the designated constraints aren't met.
type BearerAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BearerAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BearerAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BearerAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BearerAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BearerAuthValidationError) ErrorName() string { return "BearerAuthValidationError" }

// Error satisfies the builtin error interface
func (e BearerAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBearerAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BearerAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BearerAuthValidationError{}

// Validate checks the field values on DigestAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DigestAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DigestAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DigestAuthMultiError, or
// nil if none found.
func (m *DigestAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *DigestAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := DigestAuthValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRealm()) < 1 {
		err := DigestAuthValidationError{
			field:  "Realm",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNonce()) < 1 {
		err := DigestAuthValidationError{
			field:  "Nonce",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUri()) < 1 {
		err := DigestAuthValidationError{
			field:  "Uri",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResponse()) < 1 {
		err := DigestAuthValidationError{
			field:  "Response",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAlgorithm()) < 1 {
		err := DigestAuthValidationError{
			field:  "Algorithm",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetQop()) < 1 {
		err := DigestAuthValidationError{
			field:  "Qop",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNc()) < 1 {
		err := DigestAuthValidationError{
			field:  "Nc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCnonce()) < 1 {
		err := DigestAuthValidationError{
			field:  "Cnonce",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DigestAuthMultiError(errors)
	}

	return nil
}

// DigestAuthMultiError is an error wrapping multiple validation errors
// returned by DigestAuth.ValidateAll() if the designated constraints aren't met.
type DigestAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DigestAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DigestAuthMultiError) AllErrors() []error { return m }

// DigestAuthValidationError is the validation error returned by
// DigestAuth.Validate if the designated constraints aren't met.
type DigestAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DigestAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DigestAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DigestAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DigestAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DigestAuthValidationError) ErrorName() string { return "DigestAuthValidationError" }

// Error satisfies the builtin error interface
func (e DigestAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDigestAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DigestAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DigestAuthValidationError{}

// Validate checks the field values on OAuth2Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth2Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth2Auth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuth2AuthMultiError, or
// nil if none found.
func (m *OAuth2Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth2Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := OAuth2AuthValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenType()) < 1 {
		err := OAuth2AuthValidationError{
			field:  "TokenType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresIn() <= 0 {
		err := OAuth2AuthValidationError{
			field:  "ExpiresIn",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
		err := OAuth2AuthValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetScope()) < 1 {
		err := OAuth2AuthValidationError{
			field:  "Scope",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuth2AuthMultiError(errors)
	}

	return nil
}

// OAuth2AuthMultiError is an error wrapping multiple validation errors
// returned by OAuth2Auth.ValidateAll() if the designated constraints aren't met.
type OAuth2AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth2AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth2AuthMultiError) AllErrors() []error { return m }

// OAuth2AuthValidationError is the validation error returned by
// OAuth2Auth.Validate if the designated constraints aren't met.
type OAuth2AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth2AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth2AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth2AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth2AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth2AuthValidationError) ErrorName() string { return "OAuth2AuthValidationError" }

// Error satisfies the builtin error interface
func (e OAuth2AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth2Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth2AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth2AuthValidationError{}

// Validate checks the field values on ApiKeyAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiKeyAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiKeyAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiKeyAuthMultiError, or
// nil if none found.
func (m *ApiKeyAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiKeyAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApiKey()) < 1 {
		err := ApiKeyAuthValidationError{
			field:  "ApiKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiKeyAuthMultiError(errors)
	}

	return nil
}

// ApiKeyAuthMultiError is an error wrapping multiple validation errors
// returned by ApiKeyAuth.ValidateAll() if the designated constraints aren't met.
type ApiKeyAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiKeyAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiKeyAuthMultiError) AllErrors() []error { return m }

// ApiKeyAuthValidationError is the validation error returned by
// ApiKeyAuth.Validate if the designated constraints aren't met.
type ApiKeyAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiKeyAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiKeyAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiKeyAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiKeyAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiKeyAuthValidationError) ErrorName() string { return "ApiKeyAuthValidationError" }

// Error satisfies the builtin error interface
func (e ApiKeyAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiKeyAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiKeyAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiKeyAuthValidationError{}

// Validate checks the field values on JwtAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JwtAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JwtAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JwtAuthMultiError, or nil if none found.
func (m *JwtAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *JwtAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := JwtAuthValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetJwtToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JwtAuthValidationError{
					field:  "JwtToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JwtAuthValidationError{
					field:  "JwtToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwtToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JwtAuthValidationError{
				field:  "JwtToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClaims()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JwtAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JwtAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaims()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JwtAuthValidationError{
				field:  "Claims",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JwtAuthMultiError(errors)
	}

	return nil
}

// JwtAuthMultiError is an error wrapping multiple validation errors returned
// by JwtAuth.ValidateAll() if the designated constraints aren't met.
type JwtAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JwtAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JwtAuthMultiError) AllErrors() []error { return m }

// JwtAuthValidationError is the validation error returned by JwtAuth.Validate
// if the designated constraints aren't met.
type JwtAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtAuthValidationError) ErrorName() string { return "JwtAuthValidationError" }

// Error satisfies the builtin error interface
func (e JwtAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtAuthValidationError{}

// Validate checks the field values on AuthN with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthN with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthNMultiError, or nil if none found.
func (m *AuthN) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := AuthN_Type_name[int32(m.GetType())]; !ok {
		err := AuthNValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Basic != nil {

		if all {
			switch v := interface{}(m.GetBasic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Basic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Basic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Bearer != nil {

		if all {
			switch v := interface{}(m.GetBearer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Bearer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Bearer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBearer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "Bearer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Digest != nil {

		if all {
			switch v := interface{}(m.GetDigest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Digest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Digest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDigest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "Digest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Oauth2 != nil {

		if all {
			switch v := interface{}(m.GetOauth2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Oauth2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Oauth2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOauth2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "Oauth2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ApiKey != nil {

		if all {
			switch v := interface{}(m.GetApiKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Jwt != nil {

		if all {
			switch v := interface{}(m.GetJwt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Jwt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthNValidationError{
						field:  "Jwt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthNValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Additional != nil {
		// no validation rules for Additional
	}

	if len(errors) > 0 {
		return AuthNMultiError(errors)
	}

	return nil
}

// AuthNMultiError is an error wrapping multiple validation errors returned by
// AuthN.ValidateAll() if the designated constraints aren't met.
type AuthNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthNMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthNMultiError) AllErrors() []error { return m }

// AuthNValidationError is the validation error returned by AuthN.Validate if
// the designated constraints aren't met.
type AuthNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthNValidationError) ErrorName() string { return "AuthNValidationError" }

// Error satisfies the builtin error interface
func (e AuthNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthNValidationError{}

// Validate checks the field values on CasbinAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CasbinAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CasbinAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CasbinAuthMultiError, or
// nil if none found.
func (m *CasbinAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *CasbinAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CasbinAuthValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClaims()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CasbinAuthValidationError{
					field:  "Claims",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaims()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CasbinAuthValidationError{
				field:  "Claims",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CasbinAuthMultiError(errors)
	}

	return nil
}

// CasbinAuthMultiError is an error wrapping multiple validation errors
// returned by CasbinAuth.ValidateAll() if the designated constraints aren't met.
type CasbinAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CasbinAuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CasbinAuthMultiError) AllErrors() []error { return m }

// CasbinAuthValidationError is the validation error returned by
// CasbinAuth.Validate if the designated constraints aren't met.
type CasbinAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CasbinAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CasbinAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CasbinAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CasbinAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CasbinAuthValidationError) ErrorName() string { return "CasbinAuthValidationError" }

// Error satisfies the builtin error interface
func (e CasbinAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCasbinAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CasbinAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CasbinAuthValidationError{}

// Validate checks the field values on AuthZ with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthZ) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthZ with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthZMultiError, or nil if none found.
func (m *AuthZ) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthZ) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Root

	// no validation rules for Id

	if _, ok := _AuthZ_UserType_InLookup[m.GetUserType()]; !ok {
		err := AuthZValidationError{
			field:  "UserType",
			reason: "value must be in list [admin user guest]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetCasbin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthZValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthZValidationError{
					field:  "Casbin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCasbin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthZValidationError{
				field:  "Casbin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthZMultiError(errors)
	}

	return nil
}

// AuthZMultiError is an error wrapping multiple validation errors returned by
// AuthZ.ValidateAll() if the designated constraints aren't met.
type AuthZMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthZMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthZMultiError) AllErrors() []error { return m }

// AuthZValidationError is the validation error returned by AuthZ.Validate if
// the designated constraints aren't met.
type AuthZValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthZValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthZValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthZValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthZValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthZValidationError) ErrorName() string { return "AuthZValidationError" }

// Error satisfies the builtin error interface
func (e AuthZValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthZ.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthZValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthZValidationError{}

var _AuthZ_UserType_InLookup = map[string]struct{}{
	"admin": {},
	"user":  {},
	"guest": {},
}

// Validate checks the field values on Claims with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Claims) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Claims with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClaimsMultiError, or nil if none found.
func (m *Claims) ValidateAll() error {
	return m.validate(true)
}

func (m *Claims) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSub()) < 1 {
		err := ClaimsValidationError{
			field:  "Sub",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIss()) < 1 {
		err := ClaimsValidationError{
			field:  "Iss",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAud()) < 1 {
		err := ClaimsValidationError{
			field:  "Aud",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Exp

	// no validation rules for Nbf

	// no validation rules for Iat

	if utf8.RuneCountInString(m.GetJti()) < 1 {
		err := ClaimsValidationError{
			field:  "Jti",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Scopes

	if len(errors) > 0 {
		return ClaimsMultiError(errors)
	}

	return nil
}

// ClaimsMultiError is an error wrapping multiple validation errors returned by
// Claims.ValidateAll() if the designated constraints aren't met.
type ClaimsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimsMultiError) AllErrors() []error { return m }

// ClaimsValidationError is the validation error returned by Claims.Validate if
// the designated constraints aren't met.
type ClaimsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimsValidationError) ErrorName() string { return "ClaimsValidationError" }

// Error satisfies the builtin error interface
func (e ClaimsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaims.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimsValidationError{}
