// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: middleware/v1/circuitbreaker/circuitbreaker.proto

package circuitbreakerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CircuitBreaker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CircuitBreaker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CircuitBreaker with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CircuitBreakerMultiError,
// or nil if none found.
func (m *CircuitBreaker) ValidateAll() error {
	return m.validate(true)
}

func (m *CircuitBreaker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssertCondtions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  fmt.Sprintf("AssertCondtions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  fmt.Sprintf("AssertCondtions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CircuitBreakerValidationError{
					field:  fmt.Sprintf("AssertCondtions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.Trigger.(type) {
	case *CircuitBreaker_SuccessRatio:
		if v == nil {
			err := CircuitBreakerValidationError{
				field:  "Trigger",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSuccessRatio()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "SuccessRatio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "SuccessRatio",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccessRatio()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CircuitBreakerValidationError{
					field:  "SuccessRatio",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CircuitBreaker_Ratio:
		if v == nil {
			err := CircuitBreakerValidationError{
				field:  "Trigger",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Ratio
	default:
		_ = v // ensures v is used
	}
	switch v := m.Action.(type) {
	case *CircuitBreaker_ResponseData:
		if v == nil {
			err := CircuitBreakerValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponseData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "ResponseData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "ResponseData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CircuitBreakerValidationError{
					field:  "ResponseData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CircuitBreaker_BackupService:
		if v == nil {
			err := CircuitBreakerValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBackupService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "BackupService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  "BackupService",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBackupService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CircuitBreakerValidationError{
					field:  "BackupService",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CircuitBreakerMultiError(errors)
	}

	return nil
}

// CircuitBreakerMultiError is an error wrapping multiple validation errors
// returned by CircuitBreaker.ValidateAll() if the designated constraints
// aren't met.
type CircuitBreakerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CircuitBreakerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CircuitBreakerMultiError) AllErrors() []error { return m }

// CircuitBreakerValidationError is the validation error returned by
// CircuitBreaker.Validate if the designated constraints aren't met.
type CircuitBreakerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CircuitBreakerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CircuitBreakerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CircuitBreakerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CircuitBreakerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CircuitBreakerValidationError) ErrorName() string { return "CircuitBreakerValidationError" }

// Error satisfies the builtin error interface
func (e CircuitBreakerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCircuitBreaker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CircuitBreakerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CircuitBreakerValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Header) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeaderMultiError, or nil if none found.
func (m *Header) ValidateAll() error {
	return m.validate(true)
}

func (m *Header) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return HeaderMultiError(errors)
	}

	return nil
}

// HeaderMultiError is an error wrapping multiple validation errors returned by
// Header.ValidateAll() if the designated constraints aren't met.
type HeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMultiError) AllErrors() []error { return m }

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on ResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseDataMultiError, or
// nil if none found.
func (m *ResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetHeader() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseDataValidationError{
						field:  fmt.Sprintf("Header[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseDataValidationError{
						field:  fmt.Sprintf("Header[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseDataValidationError{
					field:  fmt.Sprintf("Header[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Body

	if len(errors) > 0 {
		return ResponseDataMultiError(errors)
	}

	return nil
}

// ResponseDataMultiError is an error wrapping multiple validation errors
// returned by ResponseData.ValidateAll() if the designated constraints aren't met.
type ResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseDataMultiError) AllErrors() []error { return m }

// ResponseDataValidationError is the validation error returned by
// ResponseData.Validate if the designated constraints aren't met.
type ResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseDataValidationError) ErrorName() string { return "ResponseDataValidationError" }

// Error satisfies the builtin error interface
func (e ResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseDataValidationError{}

// Validate checks the field values on BackupService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BackupService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BackupService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BackupServiceMultiError, or
// nil if none found.
func (m *BackupService) ValidateAll() error {
	return m.validate(true)
}

func (m *BackupService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BackupServiceValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BackupServiceValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BackupServiceValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BackupServiceMultiError(errors)
	}

	return nil
}

// BackupServiceMultiError is an error wrapping multiple validation errors
// returned by BackupService.ValidateAll() if the designated constraints
// aren't met.
type BackupServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackupServiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackupServiceMultiError) AllErrors() []error { return m }

// BackupServiceValidationError is the validation error returned by
// BackupService.Validate if the designated constraints aren't met.
type BackupServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackupServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackupServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackupServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackupServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackupServiceValidationError) ErrorName() string { return "BackupServiceValidationError" }

// Error satisfies the builtin error interface
func (e BackupServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackupService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackupServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackupServiceValidationError{}

// Validate checks the field values on SuccessRatio with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SuccessRatio) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuccessRatio with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SuccessRatioMultiError, or
// nil if none found.
func (m *SuccessRatio) ValidateAll() error {
	return m.validate(true)
}

func (m *SuccessRatio) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Request

	// no validation rules for Bucket

	// no validation rules for Window

	if len(errors) > 0 {
		return SuccessRatioMultiError(errors)
	}

	return nil
}

// SuccessRatioMultiError is an error wrapping multiple validation errors
// returned by SuccessRatio.ValidateAll() if the designated constraints aren't met.
type SuccessRatioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuccessRatioMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuccessRatioMultiError) AllErrors() []error { return m }

// SuccessRatioValidationError is the validation error returned by
// SuccessRatio.Validate if the designated constraints aren't met.
type SuccessRatioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuccessRatioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuccessRatioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuccessRatioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuccessRatioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuccessRatioValidationError) ErrorName() string { return "SuccessRatioValidationError" }

// Error satisfies the builtin error interface
func (e SuccessRatioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuccessRatio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuccessRatioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuccessRatioValidationError{}
