// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: config/v1/logger.proto

package configv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Logger level
type LoggerLevel int32

const (
	LoggerLevel_LOGGER_LEVEL_UNSPECIFIED LoggerLevel = 0
	LoggerLevel_LOGGER_LEVEL_DEBUG       LoggerLevel = 1
	LoggerLevel_LOGGER_LEVEL_INFO        LoggerLevel = 2
	LoggerLevel_LOGGER_LEVEL_WARN        LoggerLevel = 3
	LoggerLevel_LOGGER_LEVEL_ERROR       LoggerLevel = 4
	LoggerLevel_LOGGER_LEVEL_FATAL       LoggerLevel = 5
)

// Enum value maps for LoggerLevel.
var (
	LoggerLevel_name = map[int32]string{
		0: "LOGGER_LEVEL_UNSPECIFIED",
		1: "LOGGER_LEVEL_DEBUG",
		2: "LOGGER_LEVEL_INFO",
		3: "LOGGER_LEVEL_WARN",
		4: "LOGGER_LEVEL_ERROR",
		5: "LOGGER_LEVEL_FATAL",
	}
	LoggerLevel_value = map[string]int32{
		"LOGGER_LEVEL_UNSPECIFIED": 0,
		"LOGGER_LEVEL_DEBUG":       1,
		"LOGGER_LEVEL_INFO":        2,
		"LOGGER_LEVEL_WARN":        3,
		"LOGGER_LEVEL_ERROR":       4,
		"LOGGER_LEVEL_FATAL":       5,
	}
)

func (x LoggerLevel) Enum() *LoggerLevel {
	p := new(LoggerLevel)
	*p = x
	return p
}

func (x LoggerLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_v1_logger_proto_enumTypes[0].Descriptor()
}

func (LoggerLevel) Type() protoreflect.EnumType {
	return &file_config_v1_logger_proto_enumTypes[0]
}

func (x LoggerLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerLevel.Descriptor instead.
func (LoggerLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{0}
}

// Logger hook message
type LoggerHookMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         string                 `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stacktrace    string                 `protobuf:"bytes,3,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Fields        map[string]string      `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoggerHookMessage) Reset() {
	*x = LoggerHookMessage{}
	mi := &file_config_v1_logger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggerHookMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerHookMessage) ProtoMessage() {}

func (x *LoggerHookMessage) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerHookMessage.ProtoReflect.Descriptor instead.
func (*LoggerHookMessage) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{0}
}

func (x *LoggerHookMessage) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LoggerHookMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoggerHookMessage) GetStacktrace() string {
	if x != nil {
		return x.Stacktrace
	}
	return ""
}

func (x *LoggerHookMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *LoggerHookMessage) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Logger
type Logger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable logger
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Enable dev logger output
	Develop bool `protobuf:"varint,2,opt,name=develop,proto3" json:"develop,omitempty"`
	// Set default logger
	Default bool `protobuf:"varint,3,opt,name=default,proto3" json:"default,omitempty"`
	// Logger name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Logger format json text or tint
	Format string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	// Logger level
	Level string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	// Logger output stdout
	Stdout bool `protobuf:"varint,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Disable logger caller
	DisableCaller bool `protobuf:"varint,8,opt,name=disable_caller,proto3" json:"disable_caller,omitempty"`
	// Logger caller skip
	CallerSkip uint32 `protobuf:"varint,9,opt,name=caller_skip,proto3" json:"caller_skip,omitempty"`
	// Logger time format
	TimeFormat string `protobuf:"bytes,10,opt,name=time_format,proto3" json:"time_format,omitempty"`
	// Logger file output config
	File *Logger_File `protobuf:"bytes,100,opt,name=file,proto3" json:"file,omitempty"`
	// Logger dev logger config
	DevLogger     *Logger_DevLogger `protobuf:"bytes,101,opt,name=dev_logger,proto3" json:"dev_logger,omitempty"` //DevLogger
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_config_v1_logger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1}
}

func (x *Logger) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Logger) GetDevelop() bool {
	if x != nil {
		return x.Develop
	}
	return false
}

func (x *Logger) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Logger) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Logger) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Logger) GetStdout() bool {
	if x != nil {
		return x.Stdout
	}
	return false
}

func (x *Logger) GetDisableCaller() bool {
	if x != nil {
		return x.DisableCaller
	}
	return false
}

func (x *Logger) GetCallerSkip() uint32 {
	if x != nil {
		return x.CallerSkip
	}
	return 0
}

func (x *Logger) GetTimeFormat() string {
	if x != nil {
		return x.TimeFormat
	}
	return ""
}

func (x *Logger) GetFile() *Logger_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Logger) GetDevLogger() *Logger_DevLogger {
	if x != nil {
		return x.DevLogger
	}
	return nil
}

// Logger file
type Logger_File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Lumberjack    bool                   `protobuf:"varint,2,opt,name=lumberjack,proto3" json:"lumberjack,omitempty"`
	Compress      bool                   `protobuf:"varint,3,opt,name=compress,proto3" json:"compress,omitempty"`
	LocalTime     bool                   `protobuf:"varint,4,opt,name=local_time,proto3" json:"local_time,omitempty"`
	MaxSize       int32                  `protobuf:"varint,5,opt,name=max_size,proto3" json:"max_size,omitempty"`
	MaxAge        int32                  `protobuf:"varint,6,opt,name=max_age,proto3" json:"max_age,omitempty"`
	MaxBackups    int32                  `protobuf:"varint,7,opt,name=max_backups,proto3" json:"max_backups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger_File) Reset() {
	*x = Logger_File{}
	mi := &file_config_v1_logger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger_File) ProtoMessage() {}

func (x *Logger_File) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger_File.ProtoReflect.Descriptor instead.
func (*Logger_File) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Logger_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Logger_File) GetLumberjack() bool {
	if x != nil {
		return x.Lumberjack
	}
	return false
}

func (x *Logger_File) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Logger_File) GetLocalTime() bool {
	if x != nil {
		return x.LocalTime
	}
	return false
}

func (x *Logger_File) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Logger_File) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Logger_File) GetMaxBackups() int32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

// Dev logger
type Logger_DevLogger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxSlice      uint32                 `protobuf:"varint,1,opt,name=max_slice,proto3" json:"max_slice,omitempty"`
	SortKeys      bool                   `protobuf:"varint,2,opt,name=sort_keys,proto3" json:"sort_keys,omitempty"`
	Newline       bool                   `protobuf:"varint,3,opt,name=newline,proto3" json:"newline,omitempty"`
	Indent        bool                   `protobuf:"varint,4,opt,name=indent,proto3" json:"indent,omitempty"`
	DebugColor    uint32                 `protobuf:"varint,5,opt,name=debug_color,proto3" json:"debug_color,omitempty"`
	InfoColor     uint32                 `protobuf:"varint,6,opt,name=info_color,proto3" json:"info_color,omitempty"`
	WarnColor     uint32                 `protobuf:"varint,7,opt,name=warn_color,proto3" json:"warn_color,omitempty"`
	ErrorColor    uint32                 `protobuf:"varint,8,opt,name=error_color,proto3" json:"error_color,omitempty"`
	MaxTrace      uint32                 `protobuf:"varint,9,opt,name=max_trace,proto3" json:"max_trace,omitempty"`
	Formatter     bool                   `protobuf:"varint,10,opt,name=formatter,proto3" json:"formatter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger_DevLogger) Reset() {
	*x = Logger_DevLogger{}
	mi := &file_config_v1_logger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger_DevLogger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger_DevLogger) ProtoMessage() {}

func (x *Logger_DevLogger) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_logger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger_DevLogger.ProtoReflect.Descriptor instead.
func (*Logger_DevLogger) Descriptor() ([]byte, []int) {
	return file_config_v1_logger_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Logger_DevLogger) GetMaxSlice() uint32 {
	if x != nil {
		return x.MaxSlice
	}
	return 0
}

func (x *Logger_DevLogger) GetSortKeys() bool {
	if x != nil {
		return x.SortKeys
	}
	return false
}

func (x *Logger_DevLogger) GetNewline() bool {
	if x != nil {
		return x.Newline
	}
	return false
}

func (x *Logger_DevLogger) GetIndent() bool {
	if x != nil {
		return x.Indent
	}
	return false
}

func (x *Logger_DevLogger) GetDebugColor() uint32 {
	if x != nil {
		return x.DebugColor
	}
	return 0
}

func (x *Logger_DevLogger) GetInfoColor() uint32 {
	if x != nil {
		return x.InfoColor
	}
	return 0
}

func (x *Logger_DevLogger) GetWarnColor() uint32 {
	if x != nil {
		return x.WarnColor
	}
	return 0
}

func (x *Logger_DevLogger) GetErrorColor() uint32 {
	if x != nil {
		return x.ErrorColor
	}
	return 0
}

func (x *Logger_DevLogger) GetMaxTrace() uint32 {
	if x != nil {
		return x.MaxTrace
	}
	return 0
}

func (x *Logger_DevLogger) GetFormatter() bool {
	if x != nil {
		return x.Formatter
	}
	return false
}

var File_config_v1_logger_proto protoreflect.FileDescriptor

const file_config_v1_logger_proto_rawDesc = "" +
	"\n" +
	"\x16config/v1/logger.proto\x12\tconfig.v1\"\xf6\x01\n" +
	"\x11LoggerHookMessage\x12\x14\n" +
	"\x05level\x18\x01 \x01(\tR\x05level\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1e\n" +
	"\n" +
	"stacktrace\x18\x03 \x01(\tR\n" +
	"stacktrace\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x12@\n" +
	"\x06fields\x18\x05 \x03(\v2(.config.v1.LoggerHookMessage.FieldsEntryR\x06fields\x1a9\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\a\n" +
	"\x06Logger\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12\x18\n" +
	"\adevelop\x18\x02 \x01(\bR\adevelop\x12\x18\n" +
	"\adefault\x18\x03 \x01(\bR\adefault\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x16\n" +
	"\x06format\x18\x05 \x01(\tR\x06format\x12\x14\n" +
	"\x05level\x18\x06 \x01(\tR\x05level\x12\x16\n" +
	"\x06stdout\x18\a \x01(\bR\x06stdout\x12&\n" +
	"\x0edisable_caller\x18\b \x01(\bR\x0edisable_caller\x12 \n" +
	"\vcaller_skip\x18\t \x01(\rR\vcaller_skip\x12 \n" +
	"\vtime_format\x18\n" +
	" \x01(\tR\vtime_format\x12*\n" +
	"\x04file\x18d \x01(\v2\x16.config.v1.Logger.FileR\x04file\x12;\n" +
	"\n" +
	"dev_logger\x18e \x01(\v2\x1b.config.v1.Logger.DevLoggerR\n" +
	"dev_logger\x1a\xce\x01\n" +
	"\x04File\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1e\n" +
	"\n" +
	"lumberjack\x18\x02 \x01(\bR\n" +
	"lumberjack\x12\x1a\n" +
	"\bcompress\x18\x03 \x01(\bR\bcompress\x12\x1e\n" +
	"\n" +
	"local_time\x18\x04 \x01(\bR\n" +
	"local_time\x12\x1a\n" +
	"\bmax_size\x18\x05 \x01(\x05R\bmax_size\x12\x18\n" +
	"\amax_age\x18\x06 \x01(\x05R\amax_age\x12 \n" +
	"\vmax_backups\x18\a \x01(\x05R\vmax_backups\x1a\xb9\x02\n" +
	"\tDevLogger\x12\x1c\n" +
	"\tmax_slice\x18\x01 \x01(\rR\tmax_slice\x12\x1c\n" +
	"\tsort_keys\x18\x02 \x01(\bR\tsort_keys\x12\x18\n" +
	"\anewline\x18\x03 \x01(\bR\anewline\x12\x16\n" +
	"\x06indent\x18\x04 \x01(\bR\x06indent\x12 \n" +
	"\vdebug_color\x18\x05 \x01(\rR\vdebug_color\x12\x1e\n" +
	"\n" +
	"info_color\x18\x06 \x01(\rR\n" +
	"info_color\x12\x1e\n" +
	"\n" +
	"warn_color\x18\a \x01(\rR\n" +
	"warn_color\x12 \n" +
	"\verror_color\x18\b \x01(\rR\verror_color\x12\x1c\n" +
	"\tmax_trace\x18\t \x01(\rR\tmax_trace\x12\x1c\n" +
	"\tformatter\x18\n" +
	" \x01(\bR\tformatter*\xa1\x01\n" +
	"\vLoggerLevel\x12\x1c\n" +
	"\x18LOGGER_LEVEL_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12LOGGER_LEVEL_DEBUG\x10\x01\x12\x15\n" +
	"\x11LOGGER_LEVEL_INFO\x10\x02\x12\x15\n" +
	"\x11LOGGER_LEVEL_WARN\x10\x03\x12\x16\n" +
	"\x12LOGGER_LEVEL_ERROR\x10\x04\x12\x16\n" +
	"\x12LOGGER_LEVEL_FATAL\x10\x05B\xa0\x01\n" +
	"\rcom.config.v1B\vLoggerProtoP\x01Z:github.com/origadmin/runtime/api/gen/go/config/v1;configv1\xf8\x01\x01\xa2\x02\x03CXX\xaa\x02\tConfig.V1\xca\x02\tConfig\\V1\xe2\x02\x15Config\\V1\\GPBMetadata\xea\x02\n" +
	"Config::V1b\x06proto3"

var (
	file_config_v1_logger_proto_rawDescOnce sync.Once
	file_config_v1_logger_proto_rawDescData []byte
)

func file_config_v1_logger_proto_rawDescGZIP() []byte {
	file_config_v1_logger_proto_rawDescOnce.Do(func() {
		file_config_v1_logger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_v1_logger_proto_rawDesc), len(file_config_v1_logger_proto_rawDesc)))
	})
	return file_config_v1_logger_proto_rawDescData
}

var file_config_v1_logger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_v1_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_config_v1_logger_proto_goTypes = []any{
	(LoggerLevel)(0),          // 0: config.v1.LoggerLevel
	(*LoggerHookMessage)(nil), // 1: config.v1.LoggerHookMessage
	(*Logger)(nil),            // 2: config.v1.Logger
	nil,                       // 3: config.v1.LoggerHookMessage.FieldsEntry
	(*Logger_File)(nil),       // 4: config.v1.Logger.File
	(*Logger_DevLogger)(nil),  // 5: config.v1.Logger.DevLogger
}
var file_config_v1_logger_proto_depIdxs = []int32{
	3, // 0: config.v1.LoggerHookMessage.fields:type_name -> config.v1.LoggerHookMessage.FieldsEntry
	4, // 1: config.v1.Logger.file:type_name -> config.v1.Logger.File
	5, // 2: config.v1.Logger.dev_logger:type_name -> config.v1.Logger.DevLogger
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_config_v1_logger_proto_init() }
func file_config_v1_logger_proto_init() {
	if File_config_v1_logger_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_v1_logger_proto_rawDesc), len(file_config_v1_logger_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_logger_proto_goTypes,
		DependencyIndexes: file_config_v1_logger_proto_depIdxs,
		EnumInfos:         file_config_v1_logger_proto_enumTypes,
		MessageInfos:      file_config_v1_logger_proto_msgTypes,
	}.Build()
	File_config_v1_logger_proto = out.File
	file_config_v1_logger_proto_goTypes = nil
	file_config_v1_logger_proto_depIdxs = nil
}
