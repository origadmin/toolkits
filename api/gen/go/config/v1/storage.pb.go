// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: config/v1/storage.proto

package configv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Migration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Names         []string               `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Mode          string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Migration) Reset() {
	*x = Migration{}
	mi := &file_config_v1_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Migration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Migration) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Migration) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Migration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Migration) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// Database
type Database struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Debugging
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// Dialect name: mysql, postgresql, mongodb, sqlite......
	Dialect string `protobuf:"bytes,2,opt,name=dialect,proto3" json:"dialect,omitempty"`
	// Data source (DSN string)
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Data migration
	Migration *Migration `protobuf:"bytes,10,opt,name=migration,proto3" json:"migration,omitempty"`
	// Link tracking switch
	EnableTrace bool `protobuf:"varint,12,opt,name=enable_trace,proto3" json:"enable_trace,omitempty"`
	// Performance analysis switch
	EnableMetrics bool `protobuf:"varint,13,opt,name=enable_metrics,proto3" json:"enable_metrics,omitempty"`
	// Maximum number of free connections in the connection pool
	MaxIdleConnections int32 `protobuf:"varint,20,opt,name=max_idle_connections,proto3" json:"max_idle_connections,omitempty"`
	// Maximum number of open connections in the connection pool
	MaxOpenConnections int32 `protobuf:"varint,21,opt,name=max_open_connections,proto3" json:"max_open_connections,omitempty"`
	// Maximum length of time that the connection can be reused
	ConnectionMaxLifetime int64 `protobuf:"varint,22,opt,name=connection_max_lifetime,proto3" json:"connection_max_lifetime,omitempty"`
	// Maximum number of connections in the connection pool for reading
	ConnectionMaxIdleTime int64 `protobuf:"varint,23,opt,name=connection_max_idle_time,proto3" json:"connection_max_idle_time,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_config_v1_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *Database) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Database) GetDialect() string {
	if x != nil {
		return x.Dialect
	}
	return ""
}

func (x *Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Database) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *Database) GetEnableTrace() bool {
	if x != nil {
		return x.EnableTrace
	}
	return false
}

func (x *Database) GetEnableMetrics() bool {
	if x != nil {
		return x.EnableMetrics
	}
	return false
}

func (x *Database) GetMaxIdleConnections() int32 {
	if x != nil {
		return x.MaxIdleConnections
	}
	return 0
}

func (x *Database) GetMaxOpenConnections() int32 {
	if x != nil {
		return x.MaxOpenConnections
	}
	return 0
}

func (x *Database) GetConnectionMaxLifetime() int64 {
	if x != nil {
		return x.ConnectionMaxLifetime
	}
	return 0
}

func (x *Database) GetConnectionMaxIdleTime() int64 {
	if x != nil {
		return x.ConnectionMaxIdleTime
	}
	return 0
}

// Redis
type Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db            int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	DialTimeout   int64                  `protobuf:"varint,5,opt,name=dial_timeout,proto3" json:"dial_timeout,omitempty"`
	ReadTimeout   int64                  `protobuf:"varint,6,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout  int64                  `protobuf:"varint,7,opt,name=write_timeout,proto3" json:"write_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_config_v1_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetDialTimeout() int64 {
	if x != nil {
		return x.DialTimeout
	}
	return 0
}

func (x *Redis) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Redis) GetWriteTimeout() int64 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

// Memcached
type Memcached struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	MaxIdle       int32                  `protobuf:"varint,4,opt,name=max_idle,proto3" json:"max_idle,omitempty"`
	Timeout       int64                  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Memcached) Reset() {
	*x = Memcached{}
	mi := &file_config_v1_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memcached) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memcached) ProtoMessage() {}

func (x *Memcached) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memcached.ProtoReflect.Descriptor instead.
func (*Memcached) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *Memcached) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Memcached) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Memcached) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Memcached) GetMaxIdle() int32 {
	if x != nil {
		return x.MaxIdle
	}
	return 0
}

func (x *Memcached) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// Memory
type Memory struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Size            int32                  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Capacity        int32                  `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Expiration      int64                  `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	CleanupInterval int64                  `protobuf:"varint,4,opt,name=cleanup_interval,proto3" json:"cleanup_interval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Memory) Reset() {
	*x = Memory{}
	mi := &file_config_v1_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *Memory) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Memory) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Memory) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *Memory) GetCleanupInterval() int64 {
	if x != nil {
		return x.CleanupInterval
	}
	return 0
}

// Mongo
type Mongo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uri            string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Database       string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Username       string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password       string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	AuthSource     bool                   `protobuf:"varint,5,opt,name=auth_source,proto3" json:"auth_source,omitempty"`
	MaxPoolSize    int32                  `protobuf:"varint,6,opt,name=max_pool_size,proto3" json:"max_pool_size,omitempty"`
	MinPoolSize    int32                  `protobuf:"varint,7,opt,name=min_pool_size,proto3" json:"min_pool_size,omitempty"`
	ConnectTimeout int64                  `protobuf:"varint,8,opt,name=connect_timeout,proto3" json:"connect_timeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Mongo) Reset() {
	*x = Mongo{}
	mi := &file_config_v1_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mongo) ProtoMessage() {}

func (x *Mongo) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mongo.ProtoReflect.Descriptor instead.
func (*Mongo) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *Mongo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Mongo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Mongo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Mongo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Mongo) GetAuthSource() bool {
	if x != nil {
		return x.AuthSource
	}
	return false
}

func (x *Mongo) GetMaxPoolSize() int32 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Mongo) GetMinPoolSize() int32 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *Mongo) GetConnectTimeout() int64 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

// Cache
type Cache struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Driver name: redis, memcached, etc.
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Memcached
	Memcached *Memcached `protobuf:"bytes,10,opt,name=memcached,proto3" json:"memcached,omitempty"`
	// Memory cache
	Memory *Memory `protobuf:"bytes,11,opt,name=memory,proto3" json:"memory,omitempty"`
	// Redis
	Redis *Redis `protobuf:"bytes,12,opt,name=redis,proto3" json:"redis,omitempty"`
	// Cleanup interval for memory cache in seconds.
	// If 0 or not set, a default (e.g., 5 minutes) will be used.
	CleanupInterval int64 `protobuf:"varint,13,opt,name=cleanup_interval,proto3" json:"cleanup_interval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Cache) Reset() {
	*x = Cache{}
	mi := &file_config_v1_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *Cache) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Cache) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cache) GetMemcached() *Memcached {
	if x != nil {
		return x.Memcached
	}
	return nil
}

func (x *Cache) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Cache) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Cache) GetCleanupInterval() int64 {
	if x != nil {
		return x.CleanupInterval
	}
	return 0
}

// OSS defines the configuration for cloud object storage.
type Oss struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Endpoint        string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string                 `protobuf:"bytes,2,opt,name=access_key_id,proto3" json:"access_key_id,omitempty"`
	AccessKeySecret string                 `protobuf:"bytes,3,opt,name=access_key_secret,proto3" json:"access_key_secret,omitempty"`
	Bucket          string                 `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region          string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Ssl             bool                   `protobuf:"varint,6,opt,name=ssl,proto3" json:"ssl,omitempty"`
	ConnectTimeout  int64                  `protobuf:"varint,7,opt,name=connect_timeout,proto3" json:"connect_timeout,omitempty"`
	ReadTimeout     int64                  `protobuf:"varint,8,opt,name=read_timeout,proto3" json:"read_timeout,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Oss) Reset() {
	*x = Oss{}
	mi := &file_config_v1_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Oss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oss) ProtoMessage() {}

func (x *Oss) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oss.ProtoReflect.Descriptor instead.
func (*Oss) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *Oss) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Oss) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Oss) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *Oss) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Oss) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Oss) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *Oss) GetConnectTimeout() int64 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *Oss) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

// FileLocal defines the configuration for local file system storage.
// Renamed from 'File' to avoid ambiguity.
type FileLocal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Root          string                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileLocal) Reset() {
	*x = FileLocal{}
	mi := &file_config_v1_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileLocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocal) ProtoMessage() {}

func (x *FileLocal) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocal.ProtoReflect.Descriptor instead.
func (*FileLocal) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{8}
}

func (x *FileLocal) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// FileStore groups all "file/object storage" type backends into one category.
// It uses the 'driver' field to determine which specific implementation to use.
type FileStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The 'driver' field determines which configuration block (local or oss) to use.
	// This field is crucial for ensuring JSON/YAML compatibility.
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// Local file system configuration. Only effective when driver is "local".
	// The optional keyword clearly indicates that this field may not be present.
	Local *FileLocal `protobuf:"bytes,2,opt,name=local,proto3,oneof" json:"local,omitempty"`
	// Cloud object storage configuration. Only effective when driver is "oss".
	Oss *Oss `protobuf:"bytes,3,opt,name=oss,proto3,oneof" json:"oss,omitempty"`
	// Chunk size in bytes for splitting large files.
	// For OSS, this corresponds to the multipart upload part size.
	// For local storage, it defines the size of individual blob files.
	// If 0 or not set, a reasonable default (e.g., 4MB) will be used by the implementation.
	ChunkSize     int64 `protobuf:"varint,4,opt,name=chunk_size,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileStore) Reset() {
	*x = FileStore{}
	mi := &file_config_v1_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStore) ProtoMessage() {}

func (x *FileStore) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStore.ProtoReflect.Descriptor instead.
func (*FileStore) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *FileStore) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *FileStore) GetLocal() *FileLocal {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *FileStore) GetOss() *Oss {
	if x != nil {
		return x.Oss
	}
	return nil
}

func (x *FileStore) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Storage is the top-level configuration, and its structure is now compatible with all parsers.
type Storage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map of named FileStore configurations.
	Filestores map[string]*FileStore `protobuf:"bytes,1,rep,name=filestores,proto3" json:"filestores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map of named Cache configurations.
	Caches map[string]*Cache `protobuf:"bytes,2,rep,name=caches,proto3" json:"caches,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map of named Database configurations.
	Databases map[string]*Database `protobuf:"bytes,3,rep,name=databases,proto3" json:"databases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional: Default instance names for each type.
	DefaultFilestore *string `protobuf:"bytes,4,opt,name=default_filestore,json=defaultFilestore,proto3,oneof" json:"default_filestore,omitempty"`
	DefaultCache     *string `protobuf:"bytes,5,opt,name=default_cache,json=defaultCache,proto3,oneof" json:"default_cache,omitempty"`
	DefaultDatabase  *string `protobuf:"bytes,6,opt,name=default_database,json=defaultDatabase,proto3,oneof" json:"default_database,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_config_v1_storage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_storage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_config_v1_storage_proto_rawDescGZIP(), []int{10}
}

func (x *Storage) GetFilestores() map[string]*FileStore {
	if x != nil {
		return x.Filestores
	}
	return nil
}

func (x *Storage) GetCaches() map[string]*Cache {
	if x != nil {
		return x.Caches
	}
	return nil
}

func (x *Storage) GetDatabases() map[string]*Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *Storage) GetDefaultFilestore() string {
	if x != nil && x.DefaultFilestore != nil {
		return *x.DefaultFilestore
	}
	return ""
}

func (x *Storage) GetDefaultCache() string {
	if x != nil && x.DefaultCache != nil {
		return *x.DefaultCache
	}
	return ""
}

func (x *Storage) GetDefaultDatabase() string {
	if x != nil && x.DefaultDatabase != nil {
		return *x.DefaultDatabase
	}
	return ""
}

var File_config_v1_storage_proto protoreflect.FileDescriptor

const file_config_v1_storage_proto_rawDesc = "" +
	"\n" +
	"\x17config/v1/storage.proto\x12\tconfig.v1\x1a$gnostic/openapi/v3/annotations.proto\x1a\x17validate/validate.proto\"\xfb\x01\n" +
	"\tMigration\x12;\n" +
	"\aenabled\x18\x01 \x01(\bB!\xbaG\x1e\x92\x02\x1bwhether to enable migrationR\aenabled\x12(\n" +
	"\x04path\x18\x02 \x01(\tB\x14\xbaG\x11\x92\x02\x0emigration pathR\x04path\x12*\n" +
	"\x05names\x18\x03 \x03(\tB\x14\xbaG\x11\x92\x02\x0emigration nameR\x05names\x121\n" +
	"\aversion\x18\x04 \x01(\tB\x17\xbaG\x14\x92\x02\x11migration versionR\aversion\x12(\n" +
	"\x04mode\x18\x05 \x01(\tB\x14\xbaG\x11\x92\x02\x0emigration modeR\x04mode\"\xc5\a\n" +
	"\bDatabase\x129\n" +
	"\x05debug\x18\x01 \x01(\bB#\xbaG \x92\x02\x1dwhether to enable debug mode R\x05debug\x12\x80\x01\n" +
	"\adialect\x18\x02 \x01(\tBf\xfaBIrGR\x05mssqlR\x05mysqlR\n" +
	"postgresqlR\amongodbR\x06sqliteR\x06oracleR\tsqlserverR\asqlite3\xbaG\x17\x92\x02\x14database driver nameR\adialect\x124\n" +
	"\x06source\x18\x03 \x01(\tB\x1c\xbaG\x19\x92\x02\x16data source dsn stringR\x06source\x12H\n" +
	"\tmigration\x18\n" +
	" \x01(\v2\x14.config.v1.MigrationB\x14\xbaG\x11\x92\x02\x0edata migrationR\tmigration\x12>\n" +
	"\fenable_trace\x18\f \x01(\bB\x1a\xbaG\x17\x92\x02\x14link tracking switchR\fenable_trace\x12I\n" +
	"\x0eenable_metrics\x18\r \x01(\bB!\xbaG\x1e\x92\x02\x1bperformance analysis switchR\x0eenable_metrics\x12w\n" +
	"\x14max_idle_connections\x18\x14 \x01(\x05BC\xbaG@\x92\x02=The maximum number of free connections in the connection poolR\x14max_idle_connections\x12w\n" +
	"\x14max_open_connections\x18\x15 \x01(\x05BC\xbaG@\x92\x02=The maximum number of open connections in the connection poolR\x14max_open_connections\x12u\n" +
	"\x17connection_max_lifetime\x18\x16 \x01(\x03B;\xbaG8\x92\x025The maximum length of time a connection can be reusedR\x17connection_max_lifetime\x12\x86\x01\n" +
	"\x18connection_max_idle_time\x18\x17 \x01(\x03BJ\xbaGG\x92\x02DThe maximum number of connections in the connection pool for readingR\x18connection_max_idle_time\"\xe8\x02\n" +
	"\x05Redis\x12,\n" +
	"\anetwork\x18\x01 \x01(\tB\x12\xbaG\x0f\x92\x02\fnetwork typeR\anetwork\x12!\n" +
	"\x04addr\x18\x02 \x01(\tB\r\xbaG\n" +
	"\x92\x02\aaddressR\x04addr\x12(\n" +
	"\bpassword\x18\x03 \x01(\tB\f\xbaG\t\x92\x02\x06cipherR\bpassword\x12$\n" +
	"\x02db\x18\x04 \x01(\x05B\x14\xbaG\x11\x92\x02\x0edatabase indexR\x02db\x12=\n" +
	"\fdial_timeout\x18\x05 \x01(\x03B\x19\xfaB\x04\"\x02(\x00\xbaG\x0f\x92\x02\fdial timeoutR\fdial_timeout\x12=\n" +
	"\fread_timeout\x18\x06 \x01(\x03B\x19\xfaB\x04\"\x02(\x00\xbaG\x0f\x92\x02\fread timeoutR\fread_timeout\x12@\n" +
	"\rwrite_timeout\x18\a \x01(\x03B\x1a\xfaB\x04\"\x02(\x00\xbaG\x10\x92\x02\rwrite timeoutR\rwrite_timeout\"\x84\x02\n" +
	"\tMemcached\x12!\n" +
	"\x04addr\x18\x01 \x01(\tB\r\xbaG\n" +
	"\x92\x02\aaddressR\x04addr\x12*\n" +
	"\busername\x18\x02 \x01(\tB\x0e\xbaG\v\x92\x02\busernameR\busername\x12(\n" +
	"\bpassword\x18\x03 \x01(\tB\f\xbaG\t\x92\x02\x06cipherR\bpassword\x12M\n" +
	"\bmax_idle\x18\x04 \x01(\x05B1\xbaG.i\x00\x00\x00\x00\x00\x00\xf0?\x92\x02\"maximum number of idle connectionsR\bmax_idle\x12/\n" +
	"\atimeout\x18\x05 \x01(\x03B\x15\xfaB\x04\"\x02(\x00\xbaG\v\x92\x02\bovertimeR\atimeout\"\xd1\x01\n" +
	"\x06Memory\x12\x1e\n" +
	"\x04size\x18\x01 \x01(\x05B\n" +
	"\xbaG\a\x92\x02\x04sizeR\x04size\x12*\n" +
	"\bcapacity\x18\x02 \x01(\x05B\x0e\xbaG\v\x92\x02\bcapacityR\bcapacity\x125\n" +
	"\n" +
	"expiration\x18\x03 \x01(\x03B\x15\xbaG\x12\x92\x02\x0fexpiration timeR\n" +
	"expiration\x12D\n" +
	"\x10cleanup_interval\x18\x04 \x01(\x03B\x18\xbaG\x15\x92\x02\x12clearance intervalR\x10cleanup_interval\"\xe9\x02\n" +
	"\x05Mongo\x12.\n" +
	"\x03uri\x18\x01 \x01(\tB\x1c\xbaG\x19\x92\x02\x16MongoDB connection URIR\x03uri\x12/\n" +
	"\bdatabase\x18\x02 \x01(\tB\x13\xbaG\x10\x92\x02\rDatabase nameR\bdatabase\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12 \n" +
	"\vauth_source\x18\x05 \x01(\bR\vauth_source\x12$\n" +
	"\rmax_pool_size\x18\x06 \x01(\x05R\rmax_pool_size\x12$\n" +
	"\rmin_pool_size\x18\a \x01(\x05R\rmin_pool_size\x12Y\n" +
	"\x0fconnect_timeout\x18\b \x01(\x03B/\xfaB\x04\"\x02(\x00\xbaG%\x92\x02\"Connection timeout in millisecondsR\x0fconnect_timeout\"\xd3\x03\n" +
	"\x05Cache\x12T\n" +
	"\x06driver\x18\x01 \x01(\tB<\xfaB\"r R\x04noneR\x05redisR\tmemcachedR\x06memory\xbaG\x14\x92\x02\x11cache driver nameR\x06driver\x12$\n" +
	"\x04name\x18\x02 \x01(\tB\x10\xbaG\r\x92\x02\n" +
	"cache nameR\x04name\x12W\n" +
	"\tmemcached\x18\n" +
	" \x01(\v2\x14.config.v1.MemcachedB#\xbaG \x92\x02\x1dmemcached cache configurationR\tmemcached\x12K\n" +
	"\x06memory\x18\v \x01(\v2\x11.config.v1.MemoryB \xbaG\x1d\x92\x02\x1amemory cache configurationR\x06memory\x12G\n" +
	"\x05redis\x18\f \x01(\v2\x10.config.v1.RedisB\x1f\xbaG\x1c\x92\x02\x19redis cache configurationR\x05redis\x12_\n" +
	"\x10cleanup_interval\x18\r \x01(\x03B3\xbaG0\x92\x02-Cleanup interval for memory cache in seconds.R\x10cleanup_interval\"\x81\x03\n" +
	"\x03Oss\x12:\n" +
	"\bendpoint\x18\x01 \x01(\tB\x1e\xbaG\x1b\x92\x02\x18Storage service endpointR\bendpoint\x12$\n" +
	"\raccess_key_id\x18\x02 \x01(\tR\raccess_key_id\x12,\n" +
	"\x11access_key_secret\x18\x03 \x01(\tR\x11access_key_secret\x12\x16\n" +
	"\x06bucket\x18\x04 \x01(\tR\x06bucket\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x10\n" +
	"\x03ssl\x18\x06 \x01(\bR\x03ssl\x12Y\n" +
	"\x0fconnect_timeout\x18\a \x01(\x03B/\xfaB\x04\"\x02(\x00\xbaG%\x92\x02\"Connection timeout in millisecondsR\x0fconnect_timeout\x12M\n" +
	"\fread_timeout\x18\b \x01(\x03B)\xfaB\x04\"\x02(\x00\xbaG\x1f\x92\x02\x1cRead timeout in millisecondsR\fread_timeout\"5\n" +
	"\tFileLocal\x12(\n" +
	"\x04root\x18\x01 \x01(\tB\x14\xbaG\x11\x92\x02\x0eroot directoryR\x04root\"\xc0\x01\n" +
	"\tFileStore\x12)\n" +
	"\x06driver\x18\x01 \x01(\tB\x11\xfaB\x0er\fR\x05localR\x03ossR\x06driver\x12/\n" +
	"\x05local\x18\x02 \x01(\v2\x14.config.v1.FileLocalH\x00R\x05local\x88\x01\x01\x12%\n" +
	"\x03oss\x18\x03 \x01(\v2\x0e.config.v1.OssH\x01R\x03oss\x88\x01\x01\x12\x1e\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x03R\n" +
	"chunk_sizeB\b\n" +
	"\x06_localB\x06\n" +
	"\x04_oss\"\x84\x05\n" +
	"\aStorage\x12B\n" +
	"\n" +
	"filestores\x18\x01 \x03(\v2\".config.v1.Storage.FilestoresEntryR\n" +
	"filestores\x126\n" +
	"\x06caches\x18\x02 \x03(\v2\x1e.config.v1.Storage.CachesEntryR\x06caches\x12?\n" +
	"\tdatabases\x18\x03 \x03(\v2!.config.v1.Storage.DatabasesEntryR\tdatabases\x120\n" +
	"\x11default_filestore\x18\x04 \x01(\tH\x00R\x10defaultFilestore\x88\x01\x01\x12(\n" +
	"\rdefault_cache\x18\x05 \x01(\tH\x01R\fdefaultCache\x88\x01\x01\x12.\n" +
	"\x10default_database\x18\x06 \x01(\tH\x02R\x0fdefaultDatabase\x88\x01\x01\x1aS\n" +
	"\x0fFilestoresEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.config.v1.FileStoreR\x05value:\x028\x01\x1aK\n" +
	"\vCachesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.config.v1.CacheR\x05value:\x028\x01\x1aQ\n" +
	"\x0eDatabasesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.config.v1.DatabaseR\x05value:\x028\x01B\x14\n" +
	"\x12_default_filestoreB\x10\n" +
	"\x0e_default_cacheB\x13\n" +
	"\x11_default_databaseB\xa1\x01\n" +
	"\rcom.config.v1B\fStorageProtoP\x01Z:github.com/origadmin/runtime/api/gen/go/config/v1;configv1\xf8\x01\x01\xa2\x02\x03CXX\xaa\x02\tConfig.V1\xca\x02\tConfig\\V1\xe2\x02\x15Config\\V1\\GPBMetadata\xea\x02\n" +
	"Config::V1b\x06proto3"

var (
	file_config_v1_storage_proto_rawDescOnce sync.Once
	file_config_v1_storage_proto_rawDescData []byte
)

func file_config_v1_storage_proto_rawDescGZIP() []byte {
	file_config_v1_storage_proto_rawDescOnce.Do(func() {
		file_config_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_v1_storage_proto_rawDesc), len(file_config_v1_storage_proto_rawDesc)))
	})
	return file_config_v1_storage_proto_rawDescData
}

var file_config_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_config_v1_storage_proto_goTypes = []any{
	(*Migration)(nil), // 0: config.v1.Migration
	(*Database)(nil),  // 1: config.v1.Database
	(*Redis)(nil),     // 2: config.v1.Redis
	(*Memcached)(nil), // 3: config.v1.Memcached
	(*Memory)(nil),    // 4: config.v1.Memory
	(*Mongo)(nil),     // 5: config.v1.Mongo
	(*Cache)(nil),     // 6: config.v1.Cache
	(*Oss)(nil),       // 7: config.v1.Oss
	(*FileLocal)(nil), // 8: config.v1.FileLocal
	(*FileStore)(nil), // 9: config.v1.FileStore
	(*Storage)(nil),   // 10: config.v1.Storage
	nil,               // 11: config.v1.Storage.FilestoresEntry
	nil,               // 12: config.v1.Storage.CachesEntry
	nil,               // 13: config.v1.Storage.DatabasesEntry
}
var file_config_v1_storage_proto_depIdxs = []int32{
	0,  // 0: config.v1.Database.migration:type_name -> config.v1.Migration
	3,  // 1: config.v1.Cache.memcached:type_name -> config.v1.Memcached
	4,  // 2: config.v1.Cache.memory:type_name -> config.v1.Memory
	2,  // 3: config.v1.Cache.redis:type_name -> config.v1.Redis
	8,  // 4: config.v1.FileStore.local:type_name -> config.v1.FileLocal
	7,  // 5: config.v1.FileStore.oss:type_name -> config.v1.Oss
	11, // 6: config.v1.Storage.filestores:type_name -> config.v1.Storage.FilestoresEntry
	12, // 7: config.v1.Storage.caches:type_name -> config.v1.Storage.CachesEntry
	13, // 8: config.v1.Storage.databases:type_name -> config.v1.Storage.DatabasesEntry
	9,  // 9: config.v1.Storage.FilestoresEntry.value:type_name -> config.v1.FileStore
	6,  // 10: config.v1.Storage.CachesEntry.value:type_name -> config.v1.Cache
	1,  // 11: config.v1.Storage.DatabasesEntry.value:type_name -> config.v1.Database
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_config_v1_storage_proto_init() }
func file_config_v1_storage_proto_init() {
	if File_config_v1_storage_proto != nil {
		return
	}
	file_config_v1_storage_proto_msgTypes[9].OneofWrappers = []any{}
	file_config_v1_storage_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_v1_storage_proto_rawDesc), len(file_config_v1_storage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_storage_proto_goTypes,
		DependencyIndexes: file_config_v1_storage_proto_depIdxs,
		MessageInfos:      file_config_v1_storage_proto_msgTypes,
	}.Build()
	File_config_v1_storage_proto = out.File
	file_config_v1_storage_proto_goTypes = nil
	file_config_v1_storage_proto_depIdxs = nil
}
