// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/v1/fs.proto

package storagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for IsDir

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetModTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "ModTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "ModTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileInfoValidationError{
				field:  "ModTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatRequestMultiError, or
// nil if none found.
func (m *StatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return StatRequestMultiError(errors)
	}

	return nil
}

// StatRequestMultiError is an error wrapping multiple validation errors
// returned by StatRequest.ValidateAll() if the designated constraints aren't met.
type StatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatRequestMultiError) AllErrors() []error { return m }

// StatRequestValidationError is the validation error returned by
// StatRequest.Validate if the designated constraints aren't met.
type StatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatRequestValidationError) ErrorName() string { return "StatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatRequestValidationError{}

// Validate checks the field values on StatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatResponseMultiError, or
// nil if none found.
func (m *StatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatResponseValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatResponseMultiError(errors)
	}

	return nil
}

// StatResponseMultiError is an error wrapping multiple validation errors
// returned by StatResponse.ValidateAll() if the designated constraints aren't met.
type StatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatResponseMultiError) AllErrors() []error { return m }

// StatResponseValidationError is the validation error returned by
// StatResponse.Validate if the designated constraints aren't met.
type StatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatResponseValidationError) ErrorName() string { return "StatResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatResponseValidationError{}

// Validate checks the field values on MkdirRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MkdirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MkdirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MkdirRequestMultiError, or
// nil if none found.
func (m *MkdirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MkdirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return MkdirRequestMultiError(errors)
	}

	return nil
}

// MkdirRequestMultiError is an error wrapping multiple validation errors
// returned by MkdirRequest.ValidateAll() if the designated constraints aren't met.
type MkdirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MkdirRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MkdirRequestMultiError) AllErrors() []error { return m }

// MkdirRequestValidationError is the validation error returned by
// MkdirRequest.Validate if the designated constraints aren't met.
type MkdirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MkdirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MkdirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MkdirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MkdirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MkdirRequestValidationError) ErrorName() string { return "MkdirRequestValidationError" }

// Error satisfies the builtin error interface
func (e MkdirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMkdirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MkdirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MkdirRequestValidationError{}

// Validate checks the field values on MkdirResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MkdirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MkdirResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MkdirResponseMultiError, or
// nil if none found.
func (m *MkdirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MkdirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MkdirResponseMultiError(errors)
	}

	return nil
}

// MkdirResponseMultiError is an error wrapping multiple validation errors
// returned by MkdirResponse.ValidateAll() if the designated constraints
// aren't met.
type MkdirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MkdirResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MkdirResponseMultiError) AllErrors() []error { return m }

// MkdirResponseValidationError is the validation error returned by
// MkdirResponse.Validate if the designated constraints aren't met.
type MkdirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MkdirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MkdirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MkdirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MkdirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MkdirResponseValidationError) ErrorName() string { return "MkdirResponseValidationError" }

// Error satisfies the builtin error interface
func (e MkdirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMkdirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MkdirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MkdirResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Recursive

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on RenameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RenameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RenameRequestMultiError, or
// nil if none found.
func (m *RenameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromPath

	// no validation rules for ToPath

	if len(errors) > 0 {
		return RenameRequestMultiError(errors)
	}

	return nil
}

// RenameRequestMultiError is an error wrapping multiple validation errors
// returned by RenameRequest.ValidateAll() if the designated constraints
// aren't met.
type RenameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameRequestMultiError) AllErrors() []error { return m }

// RenameRequestValidationError is the validation error returned by
// RenameRequest.Validate if the designated constraints aren't met.
type RenameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameRequestValidationError) ErrorName() string { return "RenameRequestValidationError" }

// Error satisfies the builtin error interface
func (e RenameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameRequestValidationError{}

// Validate checks the field values on RenameResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RenameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RenameResponseMultiError,
// or nil if none found.
func (m *RenameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RenameResponseMultiError(errors)
	}

	return nil
}

// RenameResponseMultiError is an error wrapping multiple validation errors
// returned by RenameResponse.ValidateAll() if the designated constraints
// aren't met.
type RenameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameResponseMultiError) AllErrors() []error { return m }

// RenameResponseValidationError is the validation error returned by
// RenameResponse.Validate if the designated constraints aren't met.
type RenameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameResponseValidationError) ErrorName() string { return "RenameResponseValidationError" }

// Error satisfies the builtin error interface
func (e RenameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameResponseValidationError{}

// Validate checks the field values on ReadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadRequestMultiError, or
// nil if none found.
func (m *ReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return ReadRequestMultiError(errors)
	}

	return nil
}

// ReadRequestMultiError is an error wrapping multiple validation errors
// returned by ReadRequest.ValidateAll() if the designated constraints aren't met.
type ReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadRequestMultiError) AllErrors() []error { return m }

// ReadRequestValidationError is the validation error returned by
// ReadRequest.Validate if the designated constraints aren't met.
type ReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRequestValidationError) ErrorName() string { return "ReadRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRequestValidationError{}

// Validate checks the field values on ReadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReadResponseMultiError, or
// nil if none found.
func (m *ReadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chunk

	if len(errors) > 0 {
		return ReadResponseMultiError(errors)
	}

	return nil
}

// ReadResponseMultiError is an error wrapping multiple validation errors
// returned by ReadResponse.ValidateAll() if the designated constraints aren't met.
type ReadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadResponseMultiError) AllErrors() []error { return m }

// ReadResponseValidationError is the validation error returned by
// ReadResponse.Validate if the designated constraints aren't met.
type ReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadResponseValidationError) ErrorName() string { return "ReadResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadResponseValidationError{}

// Validate checks the field values on WriteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WriteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WriteRequestMultiError, or
// nil if none found.
func (m *WriteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *WriteRequest_Metadata:
		if v == nil {
			err := WriteRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WriteRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WriteRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WriteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WriteRequest_Chunk:
		if v == nil {
			err := WriteRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Chunk
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WriteRequestMultiError(errors)
	}

	return nil
}

// WriteRequestMultiError is an error wrapping multiple validation errors
// returned by WriteRequest.ValidateAll() if the designated constraints aren't met.
type WriteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteRequestMultiError) AllErrors() []error { return m }

// WriteRequestValidationError is the validation error returned by
// WriteRequest.Validate if the designated constraints aren't met.
type WriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteRequestValidationError) ErrorName() string { return "WriteRequestValidationError" }

// Error satisfies the builtin error interface
func (e WriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteRequestValidationError{}

// Validate checks the field values on WriteRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteRequestMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteRequestMetadataMultiError, or nil if none found.
func (m *WriteRequestMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteRequestMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return WriteRequestMetadataMultiError(errors)
	}

	return nil
}

// WriteRequestMetadataMultiError is an error wrapping multiple validation
// errors returned by WriteRequestMetadata.ValidateAll() if the designated
// constraints aren't met.
type WriteRequestMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteRequestMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteRequestMetadataMultiError) AllErrors() []error { return m }

// WriteRequestMetadataValidationError is the validation error returned by
// WriteRequestMetadata.Validate if the designated constraints aren't met.
type WriteRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteRequestMetadataValidationError) ErrorName() string {
	return "WriteRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e WriteRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteRequestMetadataValidationError{}

// Validate checks the field values on WriteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WriteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WriteResponseMultiError, or
// nil if none found.
func (m *WriteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Path

	if len(errors) > 0 {
		return WriteResponseMultiError(errors)
	}

	return nil
}

// WriteResponseMultiError is an error wrapping multiple validation errors
// returned by WriteResponse.ValidateAll() if the designated constraints
// aren't met.
type WriteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteResponseMultiError) AllErrors() []error { return m }

// WriteResponseValidationError is the validation error returned by
// WriteResponse.Validate if the designated constraints aren't met.
type WriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteResponseValidationError) ErrorName() string { return "WriteResponseValidationError" }

// Error satisfies the builtin error interface
func (e WriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteResponseValidationError{}

// Validate checks the field values on InitiateUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateUploadRequestMultiError, or nil if none found.
func (m *InitiateUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return InitiateUploadRequestMultiError(errors)
	}

	return nil
}

// InitiateUploadRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateUploadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateUploadRequestMultiError) AllErrors() []error { return m }

// InitiateUploadRequestValidationError is the validation error returned by
// InitiateUploadRequest.Validate if the designated constraints aren't met.
type InitiateUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateUploadRequestValidationError) ErrorName() string {
	return "InitiateUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateUploadRequestValidationError{}

// Validate checks the field values on InitiateUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateUploadResponseMultiError, or nil if none found.
func (m *InitiateUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	if len(errors) > 0 {
		return InitiateUploadResponseMultiError(errors)
	}

	return nil
}

// InitiateUploadResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateUploadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateUploadResponseMultiError) AllErrors() []error { return m }

// InitiateUploadResponseValidationError is the validation error returned by
// InitiateUploadResponse.Validate if the designated constraints aren't met.
type InitiateUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateUploadResponseValidationError) ErrorName() string {
	return "InitiateUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateUploadResponseValidationError{}

// Validate checks the field values on UploadChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadChunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadChunkRequestMultiError, or nil if none found.
func (m *UploadChunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadChunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *UploadChunkRequest_Metadata:
		if v == nil {
			err := UploadChunkRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadChunkRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadChunkRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadChunkRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UploadChunkRequest_Chunk:
		if v == nil {
			err := UploadChunkRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Chunk
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UploadChunkRequestMultiError(errors)
	}

	return nil
}

// UploadChunkRequestMultiError is an error wrapping multiple validation errors
// returned by UploadChunkRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadChunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadChunkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadChunkRequestMultiError) AllErrors() []error { return m }

// UploadChunkRequestValidationError is the validation error returned by
// UploadChunkRequest.Validate if the designated constraints aren't met.
type UploadChunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadChunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadChunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadChunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadChunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadChunkRequestValidationError) ErrorName() string {
	return "UploadChunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadChunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadChunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadChunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadChunkRequestValidationError{}

// Validate checks the field values on UploadChunkMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadChunkMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadChunkMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadChunkMetadataMultiError, or nil if none found.
func (m *UploadChunkMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadChunkMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for Offset

	if len(errors) > 0 {
		return UploadChunkMetadataMultiError(errors)
	}

	return nil
}

// UploadChunkMetadataMultiError is an error wrapping multiple validation
// errors returned by UploadChunkMetadata.ValidateAll() if the designated
// constraints aren't met.
type UploadChunkMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadChunkMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadChunkMetadataMultiError) AllErrors() []error { return m }

// UploadChunkMetadataValidationError is the validation error returned by
// UploadChunkMetadata.Validate if the designated constraints aren't met.
type UploadChunkMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadChunkMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadChunkMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadChunkMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadChunkMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadChunkMetadataValidationError) ErrorName() string {
	return "UploadChunkMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e UploadChunkMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadChunkMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadChunkMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadChunkMetadataValidationError{}

// Validate checks the field values on UploadChunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadChunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadChunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadChunkResponseMultiError, or nil if none found.
func (m *UploadChunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadChunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for WrittenSize

	if len(errors) > 0 {
		return UploadChunkResponseMultiError(errors)
	}

	return nil
}

// UploadChunkResponseMultiError is an error wrapping multiple validation
// errors returned by UploadChunkResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadChunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadChunkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadChunkResponseMultiError) AllErrors() []error { return m }

// UploadChunkResponseValidationError is the validation error returned by
// UploadChunkResponse.Validate if the designated constraints aren't met.
type UploadChunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadChunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadChunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadChunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadChunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadChunkResponseValidationError) ErrorName() string {
	return "UploadChunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadChunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadChunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadChunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadChunkResponseValidationError{}

// Validate checks the field values on FinalizeUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinalizeUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeUploadRequestMultiError, or nil if none found.
func (m *FinalizeUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for ContentSha256

	if len(errors) > 0 {
		return FinalizeUploadRequestMultiError(errors)
	}

	return nil
}

// FinalizeUploadRequestMultiError is an error wrapping multiple validation
// errors returned by FinalizeUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type FinalizeUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeUploadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeUploadRequestMultiError) AllErrors() []error { return m }

// FinalizeUploadRequestValidationError is the validation error returned by
// FinalizeUploadRequest.Validate if the designated constraints aren't met.
type FinalizeUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeUploadRequestValidationError) ErrorName() string {
	return "FinalizeUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinalizeUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeUploadRequestValidationError{}

// Validate checks the field values on FinalizeUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinalizeUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinalizeUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinalizeUploadResponseMultiError, or nil if none found.
func (m *FinalizeUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinalizeUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinalizeUploadResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinalizeUploadResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinalizeUploadResponseValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinalizeUploadResponseMultiError(errors)
	}

	return nil
}

// FinalizeUploadResponseMultiError is an error wrapping multiple validation
// errors returned by FinalizeUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type FinalizeUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinalizeUploadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinalizeUploadResponseMultiError) AllErrors() []error { return m }

// FinalizeUploadResponseValidationError is the validation error returned by
// FinalizeUploadResponse.Validate if the designated constraints aren't met.
type FinalizeUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinalizeUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinalizeUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinalizeUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinalizeUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinalizeUploadResponseValidationError) ErrorName() string {
	return "FinalizeUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FinalizeUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinalizeUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinalizeUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinalizeUploadResponseValidationError{}
