// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/tlsconfig.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TLSConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSConfigMultiError, or nil
// if none found.
func (m *TLSConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TLSConfigValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TLSConfigValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TLSConfigValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TLSConfigValidationError{
					field:  "Pem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TLSConfigValidationError{
					field:  "Pem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TLSConfigValidationError{
				field:  "Pem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TLSConfigMultiError(errors)
	}

	return nil
}

// TLSConfigMultiError is an error wrapping multiple validation errors returned
// by TLSConfig.ValidateAll() if the designated constraints aren't met.
type TLSConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSConfigMultiError) AllErrors() []error { return m }

// TLSConfigValidationError is the validation error returned by
// TLSConfig.Validate if the designated constraints aren't met.
type TLSConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSConfigValidationError) ErrorName() string { return "TLSConfigValidationError" }

// Error satisfies the builtin error interface
func (e TLSConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSConfigValidationError{}

// Validate checks the field values on TLSConfig_File with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSConfig_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSConfig_File with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSConfig_FileMultiError,
// or nil if none found.
func (m *TLSConfig_File) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSConfig_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for Ca

	if len(errors) > 0 {
		return TLSConfig_FileMultiError(errors)
	}

	return nil
}

// TLSConfig_FileMultiError is an error wrapping multiple validation errors
// returned by TLSConfig_File.ValidateAll() if the designated constraints
// aren't met.
type TLSConfig_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSConfig_FileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSConfig_FileMultiError) AllErrors() []error { return m }

// TLSConfig_FileValidationError is the validation error returned by
// TLSConfig_File.Validate if the designated constraints aren't met.
type TLSConfig_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSConfig_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSConfig_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSConfig_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSConfig_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSConfig_FileValidationError) ErrorName() string { return "TLSConfig_FileValidationError" }

// Error satisfies the builtin error interface
func (e TLSConfig_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSConfig_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSConfig_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSConfig_FileValidationError{}

// Validate checks the field values on TLSConfig_PEM with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TLSConfig_PEM) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLSConfig_PEM with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TLSConfig_PEMMultiError, or
// nil if none found.
func (m *TLSConfig_PEM) ValidateAll() error {
	return m.validate(true)
}

func (m *TLSConfig_PEM) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for Ca

	if len(errors) > 0 {
		return TLSConfig_PEMMultiError(errors)
	}

	return nil
}

// TLSConfig_PEMMultiError is an error wrapping multiple validation errors
// returned by TLSConfig_PEM.ValidateAll() if the designated constraints
// aren't met.
type TLSConfig_PEMMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSConfig_PEMMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSConfig_PEMMultiError) AllErrors() []error { return m }

// TLSConfig_PEMValidationError is the validation error returned by
// TLSConfig_PEM.Validate if the designated constraints aren't met.
type TLSConfig_PEMValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSConfig_PEMValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSConfig_PEMValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSConfig_PEMValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSConfig_PEMValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSConfig_PEMValidationError) ErrorName() string { return "TLSConfig_PEMValidationError" }

// Error satisfies the builtin error interface
func (e TLSConfig_PEMValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLSConfig_PEM.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSConfig_PEMValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSConfig_PEMValidationError{}
