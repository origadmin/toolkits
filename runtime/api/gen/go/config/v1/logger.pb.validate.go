// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/logger.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoggerHookMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoggerHookMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggerHookMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoggerHookMessageMultiError, or nil if none found.
func (m *LoggerHookMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggerHookMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Message

	// no validation rules for Stacktrace

	// no validation rules for Error

	// no validation rules for Fields

	if len(errors) > 0 {
		return LoggerHookMessageMultiError(errors)
	}

	return nil
}

// LoggerHookMessageMultiError is an error wrapping multiple validation errors
// returned by LoggerHookMessage.ValidateAll() if the designated constraints
// aren't met.
type LoggerHookMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerHookMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerHookMessageMultiError) AllErrors() []error { return m }

// LoggerHookMessageValidationError is the validation error returned by
// LoggerHookMessage.Validate if the designated constraints aren't met.
type LoggerHookMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerHookMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerHookMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerHookMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerHookMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerHookMessageValidationError) ErrorName() string {
	return "LoggerHookMessageValidationError"
}

// Error satisfies the builtin error interface
func (e LoggerHookMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggerHookMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerHookMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerHookMessageValidationError{}

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoggerMultiError, or nil if none found.
func (m *Logger) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Disabled

	// no validation rules for Develop

	// no validation rules for Default

	// no validation rules for Name

	// no validation rules for Format

	// no validation rules for Level

	// no validation rules for Stdout

	// no validation rules for DisableCaller

	// no validation rules for CallerSkip

	// no validation rules for TimeFormat

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDevLogger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "DevLogger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "DevLogger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "DevLogger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoggerMultiError(errors)
	}

	return nil
}

// LoggerMultiError is an error wrapping multiple validation errors returned by
// Logger.ValidateAll() if the designated constraints aren't met.
type LoggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerMultiError) AllErrors() []error { return m }

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on Logger_File with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logger_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger_File with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Logger_FileMultiError, or
// nil if none found.
func (m *Logger_File) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Lumberjack

	// no validation rules for Compress

	// no validation rules for LocalTime

	// no validation rules for MaxSize

	// no validation rules for MaxAge

	// no validation rules for MaxBackups

	if len(errors) > 0 {
		return Logger_FileMultiError(errors)
	}

	return nil
}

// Logger_FileMultiError is an error wrapping multiple validation errors
// returned by Logger_File.ValidateAll() if the designated constraints aren't met.
type Logger_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Logger_FileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Logger_FileMultiError) AllErrors() []error { return m }

// Logger_FileValidationError is the validation error returned by
// Logger_File.Validate if the designated constraints aren't met.
type Logger_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Logger_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Logger_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Logger_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Logger_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Logger_FileValidationError) ErrorName() string { return "Logger_FileValidationError" }

// Error satisfies the builtin error interface
func (e Logger_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Logger_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Logger_FileValidationError{}

// Validate checks the field values on Logger_DevLogger with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Logger_DevLogger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger_DevLogger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Logger_DevLoggerMultiError, or nil if none found.
func (m *Logger_DevLogger) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger_DevLogger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxSlice

	// no validation rules for SortKeys

	// no validation rules for Newline

	// no validation rules for Indent

	// no validation rules for DebugColor

	// no validation rules for InfoColor

	// no validation rules for WarnColor

	// no validation rules for ErrorColor

	// no validation rules for MaxTrace

	// no validation rules for Formatter

	if len(errors) > 0 {
		return Logger_DevLoggerMultiError(errors)
	}

	return nil
}

// Logger_DevLoggerMultiError is an error wrapping multiple validation errors
// returned by Logger_DevLogger.ValidateAll() if the designated constraints
// aren't met.
type Logger_DevLoggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Logger_DevLoggerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Logger_DevLoggerMultiError) AllErrors() []error { return m }

// Logger_DevLoggerValidationError is the validation error returned by
// Logger_DevLogger.Validate if the designated constraints aren't met.
type Logger_DevLoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Logger_DevLoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Logger_DevLoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Logger_DevLoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Logger_DevLoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Logger_DevLoggerValidationError) ErrorName() string { return "Logger_DevLoggerValidationError" }

// Error satisfies the builtin error interface
func (e Logger_DevLoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger_DevLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Logger_DevLoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Logger_DevLoggerValidationError{}
