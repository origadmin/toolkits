syntax = "proto3";

package storage.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/origadmin/runtime/api/gen/go/storage/v1;storagev1";

// FileInfo describes a file or directory.
message FileInfo {
  string name = 1;
  string path = 2;
  bool is_dir = 3;
  int64 size = 4;
  google.protobuf.Timestamp mod_time = 5;
}

// StorageService defines the operations for file and directory manipulation.
service StorageService {
  // --- Basic Operations ---

  // List files and directories at a given path.
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/v1/storage/list"
    };
  }

  // Get information about a single file or directory.
  rpc Stat(StatRequest) returns (StatResponse) {
    option (google.api.http) = {
      get: "/v1/storage/stat"
    };
  }

  // Create a new directory.
  rpc Mkdir(MkdirRequest) returns (MkdirResponse) {
    option (google.api.http) = {
      post: "/v1/storage/mkdir"
      body: "*"
    };
  }

  // Delete a file or directory.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      post: "/v1/storage/delete"
      body: "*"
    };
  }

  // Rename or move a file or directory.
  rpc Rename(RenameRequest) returns (RenameResponse) {
    option (google.api.http) = {
      post: "/v1/storage/rename"
      body: "*"
    };
  }

  // --- Streaming Operations ---

  // Read a file's content as a stream.
  rpc Read(ReadRequest) returns (stream ReadResponse) {
    option (google.api.http) = {
      get: "/v1/storage/read"
    };
  }

  // Write a file's content via a stream.
  // NOTE: This is suitable for reliable networks. For client-side uploads,
  // use the chunked upload methods.
  rpc Write(stream WriteRequest) returns (WriteResponse) {}

  // --- Chunked Upload Operations ---

  // Initiates a new chunked upload and returns an upload_id.
  rpc InitiateUpload(InitiateUploadRequest) returns (InitiateUploadResponse) {
    option (google.api.http) = {
      post: "/v1/storage/uploads:initiate"
      body: "*"
    };
  }

  // Uploads a chunk of data for a given upload_id.
  // NOTE: gRPC-Gateway does not support client-streaming RPCs well for file uploads.
  // This RPC should be called directly via gRPC or a custom HTTP handler.
  rpc UploadChunk(stream UploadChunkRequest) returns (UploadChunkResponse) {}

  // Finalizes a chunked upload, assembling the chunks into the final file.
  rpc FinalizeUpload(FinalizeUploadRequest) returns (FinalizeUploadResponse) {
    option (google.api.http) = {
      post: "/v1/storage/uploads:finalize"
      body: "*"
    };
  }
}

// --- Message Definitions for Basic Operations ---

message ListRequest {
  string path = 1;
}

message ListResponse {
  repeated FileInfo files = 1;
}

message StatRequest {
  string path = 1;
}

message StatResponse {
  FileInfo file = 1;
}

message MkdirRequest {
  string path = 1;
}

message MkdirResponse {}

message DeleteRequest {
  string path = 1;
  // Optional: If true and path is a directory, delete it recursively.
  bool recursive = 2;
}

message DeleteResponse {}

message RenameRequest {
  string from_path = 1;
  string to_path = 2;
}

message RenameResponse {}

// --- Message Definitions for Streaming Operations ---

message ReadRequest {
  string path = 1;
}

message ReadResponse {
  bytes chunk = 1;
}

message WriteRequest {
  oneof data {
    // The first message must contain the metadata.
    WriteRequestMetadata metadata = 1;
    // Subsequent messages contain the file's binary chunks.
    bytes chunk = 2;
  }
}

message WriteRequestMetadata {
  string path = 1;
}

message WriteResponse {
  int64 size = 1;
  string path = 2;
}

// --- Message Definitions for Chunked Upload ---

message InitiateUploadRequest {
  string path = 1; // The final path for the file.
}

message InitiateUploadResponse {
  string upload_id = 1;
}

message UploadChunkRequest {
  oneof data {
    // The first message of a new chunk stream can contain metadata.
    UploadChunkMetadata metadata = 1;
    // Subsequent messages contain the file's binary chunks.
    bytes chunk = 2;
  }
}

message UploadChunkMetadata {
  string upload_id = 1;
  // The position in the file to write this chunk.
  int64 offset = 2;
}

message UploadChunkResponse {
  string upload_id = 1;
  // The number of bytes successfully written.
  int64 written_size = 2;
}

message FinalizeUploadRequest {
  string upload_id = 1;
  // Optional: The SHA256 checksum of the entire file for validation.
  string content_sha256 = 2;
}

message FinalizeUploadResponse {
  FileInfo file = 1;
}
