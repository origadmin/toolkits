// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from log.go.

// Package slogx contains generated code by adptool.
package slogx

import (
	slog "log/slog"

	devslog "github.com/golang-cz/devslog"
	tint "github.com/lmittmann/tint"
	lumberjack "gopkg.in/natefinch/lumberjack.v2"
)

const (
	Black         = devslog.Black
	Blue          = devslog.Blue
	Cyan          = devslog.Cyan
	Green         = devslog.Green
	Magenta       = devslog.Magenta
	Red           = devslog.Red
	UnknownColor  = devslog.UnknownColor
	White         = devslog.White
	Yellow        = devslog.Yellow
	KindAny       = slog.KindAny
	KindBool      = slog.KindBool
	KindDuration  = slog.KindDuration
	KindFloat64   = slog.KindFloat64
	KindGroup     = slog.KindGroup
	KindInt64     = slog.KindInt64
	KindLogValuer = slog.KindLogValuer
	KindString    = slog.KindString
	KindTime      = slog.KindTime
	KindUint64    = slog.KindUint64
	LevelDebug    = slog.LevelDebug
	LevelError    = slog.LevelError
	LevelInfo     = slog.LevelInfo
	LevelKey      = slog.LevelKey
	LevelWarn     = slog.LevelWarn
	MessageKey    = slog.MessageKey
	SourceKey     = slog.SourceKey
	TimeKey       = slog.TimeKey
)

var DiscardHandler = slog.DiscardHandler

type (
	Color          = devslog.Color
	DevslogOptions = devslog.Options
	TintOptions    = tint.Options
	Logger         = lumberjack.Logger
	Attr           = slog.Attr
	Handler        = slog.Handler
	HandlerOptions = slog.HandlerOptions
	JSONHandler    = slog.JSONHandler
	Kind           = slog.Kind
	Level          = slog.Level
	LevelVar       = slog.LevelVar
	Leveler        = slog.Leveler
	LogValuer      = slog.LogValuer
	Logger1        = slog.Logger
	Record         = slog.Record
	Source         = slog.Source
	TextHandler    = slog.TextHandler
	Value          = slog.Value
)

func Any(key string, value any) slog.Attr {
	return slog.Any(key, value)
}

func AnyValue(v any) slog.Value {
	return slog.AnyValue(v)
}

func Bool(key string, v bool) slog.Attr {
	return slog.Bool(key, v)
}

func BoolValue(v bool) slog.Value {
	return slog.BoolValue(v)
}

func Debug(msg string, args ...any) {
	slog.Debug(msg, args...)
}

func Default() *slog.Logger {
	return slog.Default()
}

func Error(msg string, args ...any) {
	slog.Error(msg, args...)
}

func Float64(key string, v float64) slog.Attr {
	return slog.Float64(key, v)
}

func Float64Value(v float64) slog.Value {
	return slog.Float64Value(v)
}

func Group(key string, args ...any) slog.Attr {
	return slog.Group(key, args...)
}

func GroupValue(as ...slog.Attr) slog.Value {
	return slog.GroupValue(as...)
}

func Info(msg string, args ...any) {
	slog.Info(msg, args...)
}

func Int(key string, value int) slog.Attr {
	return slog.Int(key, value)
}

func Int64(key string, value int64) slog.Attr {
	return slog.Int64(key, value)
}

func Int64Value(v int64) slog.Value {
	return slog.Int64Value(v)
}

func IntValue(v int) slog.Value {
	return slog.IntValue(v)
}

func NewSlog(h slog.Handler) *slog.Logger {
	return slog.New(h)
}

func SetDefault(l *slog.Logger) {
	slog.SetDefault(l)
}

func SetLogLoggerLevel(level slog.Level) (oldLevel slog.Level) {
	return slog.SetLogLoggerLevel(level)
}

func String(key, value string) slog.Attr {
	return slog.String(key, value)
}

func StringValue(value string) slog.Value {
	return slog.StringValue(value)
}

func Uint64(key string, v uint64) slog.Attr {
	return slog.Uint64(key, v)
}

func Uint64Value(v uint64) slog.Value {
	return slog.Uint64Value(v)
}

func Warn(msg string, args ...any) {
	slog.Warn(msg, args...)
}

func With(args ...any) *slog.Logger {
	return slog.With(args...)
}
